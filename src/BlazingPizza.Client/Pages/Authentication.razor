@page "/authentication/{action}"
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<RemoteAuthenticationOptions<EasyAuthOptions>> Options
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

<EasyAuthRemoteAuthenticatorViewCore SelectedOption="@_selectedOption" Action="@Action"
TAuthenticationState="PizzaAuthenticationState" AuthenticationState="RemoteAuthenticationState"
OnLogInSucceeded="RestorePizza">
    <LoggingIn>
        <div class="container">
            @foreach (var provider in Options.Value.ProviderOptions.Providers)
            {
                <div class="row">
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <a class="btn btn-block btn-lg btn-social btn-@provider.Id"
                        @onclick="(args) => SelectOption(provider.Id)">
                            <span class="fa fa-@provider.Id"></span> Sign in with @provider.DisplayName
                        </a>
                    </div>
                </div>
            }
        </div>
    </LoggingIn>
</EasyAuthRemoteAuthenticatorViewCore>

@code{
    [Parameter] public string Action { get; set; }

    public PizzaAuthenticationState RemoteAuthenticationState { get; set; } = new PizzaAuthenticationState();

    private string _selectedOption;

    public void SelectOption(string option) => _selectedOption = option;

    protected override void OnInitialized()
    {
        if (RemoteAuthenticationActions.IsAction(RemoteAuthenticationActions.LogIn, Action))
        {
            // Preserve the current order so that we don't loose it
            RemoteAuthenticationState.Order = OrderState.Order;
        }
    }

    private void RestorePizza(PizzaAuthenticationState pizzaState)
    {
        if (pizzaState.Order != null)
        {
            OrderState.ReplaceOrder(pizzaState.Order);
        }
    }
}
